const express = require('express');
const cors = require('cors');
const path = require('path');
const nodemailer = require('nodemailer');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const users = new Map();
const verificationCodes = new Map();
const resetCodes = new Map();

// –ò–≥—Ä—ã
const games = [
    { id: 1, name: 'Roblox', category: 'Sandbox', image: 'https://via.placeholder.com/300x180/667eea/white?text=Roblox' },
    { id: 2, name: 'Minecraft', category: 'Sandbox', image: 'https://via.placeholder.com/300x180/764ba2/white?text=Minecraft' },
    { id: 3, name: 'Fortnite', category: 'Shooter', image: 'https://via.placeholder.com/300x180/ff6b6b/white?text=Fortnite' },
    { id: 4, name: 'World of Warcraft', category: 'MMORPG', image: 'https://via.placeholder.com/300x180/4ecdc4/white?text=WoW' },
    { id: 5, name: 'CS:GO', category: 'Shooter', image: 'https://via.placeholder.com/300x180/45b7d1/white?text=CS:GO' },
    { id: 6, name: 'Dota 2', category: 'Strategy', image: 'https://via.placeholder.com/300x180/96ceb4/white?text=Dota+2' }
];

const categories = [
    { id: 1, name: 'MMORPG', icon: 'fa-gamepad' },
    { id: 2, name: 'Shooter', icon: 'fa-crosshairs' },
    { id: 3, name: 'Strategy', icon: 'fa-chess' },
    { id: 4, name: 'Sandbox', icon: 'fa-cube' }
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: createTransport –≤–º–µ—Å—Ç–æ createTransporter
const createTransporter = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
        console.log('‚ùå EMAIL_USER –∏–ª–∏ EMAIL_PASS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Railway Variables');
        return null;
    }

    return nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
        }
    });
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ email
const sendEmail = async (to, subject, html) => {
    try {
        const transporter = createTransporter();
        
        if (!transporter) {
            console.log(`üìß [–¢–ï–°–¢] Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–æ–¥ –¥–ª—è ${to}: ${html.match(/<strong>(\w+)<\/strong>/)?.[1]}`);
            return { success: false, testMode: true };
        }

        const mailOptions = {
            from: `"Kirieshka.store" <${process.env.EMAIL_USER}>`,
            to: to,
            subject: subject,
            html: html
        };

        await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${to}`);
        return { success: true };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –ª–æ–≥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const code = html.match(/<strong>(\w+)<\/strong>/)?.[1];
        if (code) {
            console.log(`üìß [–û–®–ò–ë–ö–ê] –ö–æ–¥ –¥–ª—è ${to}: ${code}`);
        }
        
        return { success: false, error: error.message };
    }
};

// API Routes
app.get('/api/health', (req, res) => {
    const emailConfigured = !!(process.env.EMAIL_USER && process.env.EMAIL_PASS);
    res.json({ 
        status: 'OK', 
        message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        emailConfigured: emailConfigured,
        emailUser: emailConfigured ? process.env.EMAIL_USER.replace(/(?<=.).(?=.*@)/g, '*') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/games', (req, res) => {
    const { category, search } = req.query;
    let filteredGames = games;

    if (category && category !== 'all') {
        filteredGames = filteredGames.filter(game => 
            game.category.toLowerCase() === category.toLowerCase()
        );
    }

    if (search) {
        const searchLower = search.toLowerCase();
        filteredGames = filteredGames.filter(game =>
            game.name.toLowerCase().includes(searchLower)
        );
    }

    res.json(filteredGames);
});

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
app.get('/api/categories', (req, res) => {
    res.json(categories);
});

// –ü–æ–∏—Å–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
app.get('/api/games/search', (req, res) => {
    const query = req.query.q?.toLowerCase() || '';
    
    if (!query) {
        return res.json([]);
    }

    const results = games.filter(game =>
        game.name.toLowerCase().includes(query)
    ).slice(0, 8);

    res.json(results);
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
    const { name, email, password } = req.body;
    
    if (!name || !email || !password) {
        return res.status(400).json({ 
            success: false,
            error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        });
    }

    if (users.has(email)) {
        return res.status(400).json({
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationCode = Math.random().toString(36).substring(2, 8).toUpperCase();
    verificationCodes.set(email, {
        code: verificationCode,
        expires: Date.now() + 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users.set(email, {
        id: Date.now(),
        name,
        email,
        password,
        isVerified: false,
        createdAt: new Date()
    });

    console.log(`üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ${email}: ${verificationCode}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    const emailResult = await sendEmail(
        email,
        '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - Kirieshka.store',
        `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
            <h2 style="color: #667eea; text-align: center;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kirieshka.store! üéÆ</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${name}</strong>!</p>
            <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
            <div style="text-align: center; margin: 20px 0;">
                <span style="font-size: 32px; font-weight: bold; color: #ff6b6b; letter-spacing: 5px;">${verificationCode}</span>
            </div>
            <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <strong>30 –º–∏–Ω—É—Ç</strong>.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ Kirieshka.store, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
            <p style="color: #666; font-size: 12px; text-align: center;">
                Kirieshka.store - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤<br>
                ${new Date().getFullYear()}
            </p>
        </div>
        `
    );

    res.json({ 
        success: true,
        message: emailResult.success 
            ? '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email' 
            : '–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Railway)',
        note: !emailResult.success ? 'Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –≤ –ª–æ–≥–∞—Ö Railway.' : undefined,
        verificationCode: verificationCode // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
app.post('/api/verify-email', (req, res) => {
    const { email, code } = req.body;
    
    const user = users.get(email);
    const storedCode = verificationCodes.get(email);

    if (!user) {
        return res.status(400).json({
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    if (!storedCode) {
        return res.status(400).json({
            success: false,
            error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        });
    }

    if (storedCode.code !== code.toUpperCase()) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        });
    }

    if (storedCode.expires < Date.now()) {
        verificationCodes.delete(email);
        return res.status(400).json({
            success: false,
            error: '–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        });
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    user.isVerified = true;
    verificationCodes.delete(email);

    res.json({
        success: true,
        message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
    });
});

// –õ–æ–≥–∏–Ω
app.post('/api/login', (req, res) => {
    const { email, password } = req.body;
    
    const user = users.get(email);
    if (!user) {
        return res.status(400).json({ 
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
    }

    if (!user.isVerified) {
        return res.status(400).json({
            success: false,
            error: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º'
        });
    }

    if (user.password !== password) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        });
    }

    res.json({
        success: true,
        user: {
            id: user.id,
            name: user.name,
            email: user.email
        }
    });
});

// –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
app.post('/api/forgot-password', async (req, res) => {
    const { email } = req.body;
    
    const user = users.get(email);
    if (!user) {
        return res.status(400).json({
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞
    const resetCode = Math.random().toString(36).substring(2, 8).toUpperCase();
    resetCodes.set(email, {
        code: resetCode,
        expires: Date.now() + 30 * 60 * 1000
    });

    console.log(`üîê –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è ${email}: ${resetCode}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    const emailResult = await sendEmail(
        email,
        '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - Kirieshka.store',
        `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
            <h2 style="color: #667eea; text-align: center;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è üîê</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${user.name}</strong>!</p>
            <p>–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</p>
            <div style="text-align: center; margin: 20px 0;">
                <span style="font-size: 32px; font-weight: bold; color: #ff6b6b; letter-spacing: 5px;">${resetCode}</span>
            </div>
            <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω <strong>30 –º–∏–Ω—É—Ç</strong>.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
            <p style="color: #666; font-size: 12px; text-align: center;">
                Kirieshka.store - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤<br>
                ${new Date().getFullYear()}
            </p>
        </div>
        `
    );

    res.json({
        success: true,
        message: emailResult.success 
            ? '–ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email' 
            : '–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Railway)',
        note: !emailResult.success ? 'Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–æ–¥ –ø–æ–∫–∞–∑–∞–Ω –≤ –ª–æ–≥–∞—Ö Railway.' : undefined,
        resetCode: resetCode // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
});

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
app.post('/api/reset-password', (req, res) => {
    const { email, code, newPassword } = req.body;
    
    const user = users.get(email);
    const storedCode = resetCodes.get(email);

    if (!user) {
        return res.status(400).json({
            success: false,
            error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    if (!storedCode) {
        return res.status(400).json({
            success: false,
            error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        });
    }

    if (storedCode.code !== code.toUpperCase()) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
        });
    }

    if (storedCode.expires < Date.now()) {
        resetCodes.delete(email);
        return res.status(400).json({
            success: false,
            error: '–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    user.password = newPassword;
    resetCodes.delete(email);

    res.json({
        success: true,
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.'
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`‚úÖ Health check: http://localhost:${PORT}/api/health`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ email
    if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
        console.log(`‚úÖ Email –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${process.env.EMAIL_USER}`);
    } else {
        console.log('‚ùå Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å EMAIL_USER –∏ EMAIL_PASS –≤ Railway Variables');
    }
});